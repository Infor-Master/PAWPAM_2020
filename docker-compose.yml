version: '2.3'

services:
  rabbitmq:
    container_name: 'Projecto_rabbitmq'
    restart: unless-stopped
    image: 'rabbitmq:3-management'
    environment: 
      RABBITMQ_ERLANG_COOKIE: "SWOQKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"
    networks: 
      - public_network
      - private_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 10s
      retries: 3

  database:
    container_name: 'Projecto_database'
    restart: always
    image: postgres:12
    volumes:
      - database-data:/var/lib/data/
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=passw0rd
      - POSTGRES_DB=apidb
    ports:
      - "5432:5432"
    networks: 
      - private_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d apidb -U admin -h 0.0.0.0 -p 5432"]
      interval: 30s
      timeout: 20s
      retries: 3
  
  ocr_consumer:
    container_name: 'Projecto_OCR'
    restart: unless-stopped
    build:
      context: './ocr_consumer'
      dockerfile: 'Dockerfile'
    volumes:
        - ./ocr_consumer:/go/src/projetoapi
    depends_on:
        database:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
    environment: 
        - WAIT_HOSTS=database:5432
        - CHOKIDAR_USEPOLLING=true
    networks:
        - private_network
        - public_network
    links:
        - database
        - rabbitmq

  backend:
    container_name: 'Projecto_backend'
    restart: unless-stopped
    build:
      context: './backend'
      dockerfile: 'Dockerfile'
    volumes:
        - ./backend:/go/src/projetoapi
    depends_on:
        - ocr_consumer
    environment: 
        - WAIT_HOSTS=database:5432
        - CHOKIDAR_USEPOLLING=true
    networks:
        - private_network
        - public_network
    links:
        - database
        - rabbitmq
      
  frontend:
    container_name: 'Projecto_frontend'
    restart: unless-stopped
    depends_on:
        - backend
        - websockets
    build:
        context: './frontend'
        dockerfile: 'Dockerfile'
    volumes:
        - ./frontend:/app
        - /app/node_modules
    environment: 
        - CHOKIDAR_USEPOLLING=true
    networks:
        - public_network

  websockets:
    container_name: 'Projecto_websockets'
    restart: unless-stopped
    build: 
      context: './websockets'
      dockerfile: 'Dockerfile'
    volumes:
      - ./websockets:/app
      - /app/node_modules
    networks: 
      - public_network
  
  proxy:
    container_name: 'Projecto_proxy'
    restart: always
    depends_on: 
      - frontend
      - backend
    build:
      context: './proxy'
      dockerfile: 'Dockerfile'
    ports:
      - '5000:80'
    networks: 
      - public_network


  

volumes:
  database-data:

networks:
    public_network:
        driver: bridge
    private_network:
        driver: bridge
        driver: bridge
